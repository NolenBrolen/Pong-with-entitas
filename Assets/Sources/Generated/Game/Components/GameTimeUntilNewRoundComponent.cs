//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity timeUntilNewRoundEntity { get { return GetGroup(GameMatcher.TimeUntilNewRound).GetSingleEntity(); } }
    public TimeUntilNewRoundComponent timeUntilNewRound { get { return timeUntilNewRoundEntity.timeUntilNewRound; } }
    public bool hasTimeUntilNewRound { get { return timeUntilNewRoundEntity != null; } }

    public GameEntity SetTimeUntilNewRound(float newValue) {
        if (hasTimeUntilNewRound) {
            throw new Entitas.EntitasException("Could not set TimeUntilNewRound!\n" + this + " already has an entity with TimeUntilNewRoundComponent!",
                "You should check if the context already has a timeUntilNewRoundEntity before setting it or use context.ReplaceTimeUntilNewRound().");
        }
        var entity = CreateEntity();
        entity.AddTimeUntilNewRound(newValue);
        return entity;
    }

    public void ReplaceTimeUntilNewRound(float newValue) {
        var entity = timeUntilNewRoundEntity;
        if (entity == null) {
            entity = SetTimeUntilNewRound(newValue);
        } else {
            entity.ReplaceTimeUntilNewRound(newValue);
        }
    }

    public void RemoveTimeUntilNewRound() {
        timeUntilNewRoundEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TimeUntilNewRoundComponent timeUntilNewRound { get { return (TimeUntilNewRoundComponent)GetComponent(GameComponentsLookup.TimeUntilNewRound); } }
    public bool hasTimeUntilNewRound { get { return HasComponent(GameComponentsLookup.TimeUntilNewRound); } }

    public void AddTimeUntilNewRound(float newValue) {
        var index = GameComponentsLookup.TimeUntilNewRound;
        var component = CreateComponent<TimeUntilNewRoundComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTimeUntilNewRound(float newValue) {
        var index = GameComponentsLookup.TimeUntilNewRound;
        var component = CreateComponent<TimeUntilNewRoundComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTimeUntilNewRound() {
        RemoveComponent(GameComponentsLookup.TimeUntilNewRound);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTimeUntilNewRound;

    public static Entitas.IMatcher<GameEntity> TimeUntilNewRound {
        get {
            if (_matcherTimeUntilNewRound == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TimeUntilNewRound);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTimeUntilNewRound = matcher;
            }

            return _matcherTimeUntilNewRound;
        }
    }
}
